//@version=6
indicator("Alligator, Fractals & S&R Combined", shorttitle="A/F/S&R", overlay=true)

// This stacks Bill Williams' Alligator with clean fractal markers and simple S/R lines.
// Lean on the Alligator for trend context, take fractal breaks for entries, and use S/R as targets.
// Best on instruments that trend in bursts (indices, majors, trending alts). Great on 1h–4h; daily to filter noise.

smma(float src, int length) =>
    float smma_val = na
    float sma_val = ta.sma(src, length)
    smma_val := na(smma_val[1]) ? sma_val : (smma_val[1] * (length - 1) + src) / length
    smma_val

int lipsLength = input.int(5, "🐲 Lips Length")
int teethLength = input.int(8, "🐲 Teeth Length")
int jawLength = input.int(13, "🐲 Jaw Length")
int lipsOffset = input.int(3, "🐲 Lips Offset")
int teethOffset = input.int(5, "🐲 Teeth Offset")
int jawOffset = input.int(8, "🐲 Jaw Offset")

float lips = smma(hl2, lipsLength)
float teeth = smma(hl2, teethLength)
float jaw = smma(hl2, jawLength)

plot(lips, "🐲 Lips", color=color.new(color.green, 25), offset=lipsOffset)
plot(teeth, "🐲 Teeth", color=color.new(color.red, 25), offset=teethOffset)
plot(jaw, "🐲 Jaw", color=color.new(color.blue, 25), offset=jawOffset)

int n = input.int(2, "📌 Period", minval=2)

bool upFractal = 
   ((high[n+2] < high[n]) and (high[n+1] < high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or 
   ((high[n+3] < high[n]) and (high[n+2] < high[n]) and (high[n+1] == high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or 
   ((high[n+4] < high[n]) and (high[n+3] < high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or 
   ((high[n+5] < high[n]) and (high[n+4] < high[n]) and (high[n+3] == high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or 
   ((high[n+6] < high[n]) and (high[n+5] < high[n]) and (high[n+4] == high[n]) and (high[n+3] <= high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n]))

bool dnFractal = 
   ((low[n+2] > low[n]) and (low[n+1] > low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or 
   ((low[n+3] > low[n]) and (low[n+2] > low[n]) and (low[n+1] == low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or 
   ((low[n+4] > low[n]) and (low[n+3] > low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or 
   ((low[n+5] > low[n]) and (low[n+4] > low[n]) and (low[n+3] == low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or 
   ((low[n+6] > low[n]) and (low[n+5] > low[n]) and (low[n+4] == low[n]) and (low[n+3] >= low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n]))

plotshape(upFractal, "📌 Up-Fractal", style=shape.triangleup, location=location.abovebar, offset=-2, color=color.new(color.olive, 25))
plotshape(dnFractal, "📌 Down-Fractal", style=shape.triangledown, location=location.belowbar, offset=-2, color=color.new(color.maroon, 25))

bool showRS = input.bool(true, "⤒⤓ Show Res-Sup")
int lengthRS = input.int(13, "⤒⤓ Res-Sup Length")

float highRS = ta.valuewhen(high >= ta.highest(high, lengthRS), high, 0)
float lowRS = ta.valuewhen(low <= ta.lowest(low, lengthRS), low, 0)

plot(showRS and not na(highRS) ? highRS : na, "⤒ Resistance", color= highRS != highRS[1] ? na : color.new(color.olive, 25), linewidth=1)
plot(showRS and not na(lowRS) ? lowRS : na, "⤓ Support", color= lowRS != lowRS[1] ? na : color.new(color.maroon, 25), linewidth=1)
